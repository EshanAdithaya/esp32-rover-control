// 2-Wheel Robot - Simple Web Server Control
// Works with any browser or HTTP client apps
// No extra libraries needed - just change WiFi details below

#include <WiFi.h>
#include <WebServer.h>

// WiFi credentials - CHANGE THESE TO YOUR WIFI
const char* ssid = "YOUR_WIFI_NAME";
const char* password = "YOUR_WIFI_PASSWORD";

WebServer server(80);

// Motor pins for 2-wheel robot
int leftMotorPin1 = 13;   // D13
int leftMotorPin2 = 12;   // D12
int rightMotorPin1 = 14;  // D14
int rightMotorPin2 = 27;  // D27

void setup() {
  Serial.begin(115200);
  
  // Motor pins setup
  pinMode(leftMotorPin1, OUTPUT);
  pinMode(leftMotorPin2, OUTPUT);
  pinMode(rightMotorPin1, OUTPUT);
  pinMode(rightMotorPin2, OUTPUT);
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("WiFi connected!");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  
  // Setup web server routes
  server.on("/", handleRoot);
  server.on("/forward", []() { moveForward(); server.send(200, "text/plain", "Moving Forward"); });
  server.on("/backward", []() { moveBackward(); server.send(200, "text/plain", "Moving Backward"); });
  server.on("/left", []() { turnLeft(); server.send(200, "text/plain", "Turning Left"); });
  server.on("/right", []() { turnRight(); server.send(200, "text/plain", "Turning Right"); });
  server.on("/stop", []() { stopAllMotors(); server.send(200, "text/plain", "Stopped"); });
  
  server.begin();
  Serial.println("Web server started");
  Serial.println("2-Wheel Robot Ready!");
  stopAllMotors();
}

void loop() {
  server.handleClient();
}

void handleRoot() {
  String html = "<!DOCTYPE html><html><head><title>2-Wheel Robot</title>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<style>body{font-family:Arial;text-align:center;margin:0;padding:20px;background:#f0f0f0;}";
  html += "h1{color:#333;margin-bottom:30px;}";
  html += "button{background:#4CAF50;border:none;color:white;padding:20px 40px;text-align:center;";
  html += "font-size:18px;margin:8px;cursor:pointer;border-radius:12px;box-shadow:0 4px 8px rgba(0,0,0,0.2);}";
  html += "button:active{background:#45a049;transform:translateY(2px);}";
  html += ".stop-btn{background:#f44336 !important;}";
  html += ".control-grid{display:inline-block;margin:20px;}";
  html += "</style></head><body>";
  html += "<h1>ü§ñ 2-Wheel Robot Control</h1>";
  html += "<p><strong>Robot IP:</strong> " + WiFi.localIP().toString() + "</p>";
  html += "<div class='control-grid'>";
  html += "<button onclick=\"fetch('/forward')\">‚¨ÜÔ∏è FORWARD</button><br>";
  html += "<button onclick=\"fetch('/left')\">‚¨ÖÔ∏è LEFT</button>";
  html += "<button onclick=\"fetch('/stop')\" class='stop-btn'>‚èπÔ∏è STOP</button>";
  html += "<button onclick=\"fetch('/right')\">‚û°Ô∏è RIGHT</button><br>";
  html += "<button onclick=\"fetch('/backward')\">‚¨áÔ∏è BACKWARD</button>";
  html += "</div>";
  html += "<script>";
  html += "document.addEventListener('keydown', function(e) {";
  html += "  switch(e.key) {";
  html += "    case 'ArrowUp': fetch('/forward'); break;";
  html += "    case 'ArrowDown': fetch('/backward'); break;";
  html += "    case 'ArrowLeft': fetch('/left'); break;";
  html += "    case 'ArrowRight': fetch('/right'); break;";
  html += "    case ' ': fetch('/stop'); break;";
  html += "  }";
  html += "});";
  html += "</script>";
  html += "<p><small>üí° Tip: Use arrow keys on keyboard or touch buttons</small></p>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

// Motor Control Functions for 2-wheel robot
void leftMotorForward() {
  digitalWrite(leftMotorPin1, HIGH);
  digitalWrite(leftMotorPin2, LOW);
}

void leftMotorBackward() {
  digitalWrite(leftMotorPin1, LOW);
  digitalWrite(leftMotorPin2, HIGH);
}

void leftMotorStop() {
  digitalWrite(leftMotorPin1, LOW);
  digitalWrite(leftMotorPin2, LOW);
}

void rightMotorForward() {
  digitalWrite(rightMotorPin1, HIGH);
  digitalWrite(rightMotorPin2, LOW);
}

void rightMotorBackward() {
  digitalWrite(rightMotorPin1, LOW);
  digitalWrite(rightMotorPin2, HIGH);
}

void rightMotorStop() {
  digitalWrite(rightMotorPin1, LOW);
  digitalWrite(rightMotorPin2, LOW);
}

void moveForward() {
  leftMotorForward();
  rightMotorForward();
  Serial.println("Moving Forward");
}

void moveBackward() {
  leftMotorBackward();
  rightMotorBackward();
  Serial.println("Moving Backward");
}

void turnLeft() {
  // Sharp left turn: left motor backward, right motor forward
  leftMotorBackward();
  rightMotorForward();
  Serial.println("Turning Left");
}

void turnRight() {
  // Sharp right turn: left motor forward, right motor backward
  leftMotorForward();
  rightMotorBackward();
  Serial.println("Turning Right");
}

void stopAllMotors() {
  leftMotorStop();
  rightMotorStop();
  Serial.println("Stopped");
}
